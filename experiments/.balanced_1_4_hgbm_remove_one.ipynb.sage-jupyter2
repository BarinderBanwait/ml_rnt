{"backend_state":"ready","kernel":"python3-sage","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1734133787219,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"}},"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"74b087","input":"","pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"6d3e25","input":"from lib import utils, models, executor\nimport torch.nn as nn\nimport torch.optim as optim\nfrom pathlib import Path\nimport pandas as pd\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n# fix the seed for reproducibility\nseed = 42","pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"5bbbc7","input":"# load your data here. The following ensure this will work on Windows as well as Unix\npath = Path(\"..\") / \"data_files\" / \"sha\"/ \"ecq_sha_B_100_conds_1_500000_reg.parquet\"\ndf = utils.load_data(path)\ndf=df[df['rank']>0]","output":{"0":{"name":"stdout","output_type":"stream","text":"Loaded the dataset with 120 features and 3064705 curves..\n"}},"pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"9d0925","input":"len_4 = df[df['sha'] == 4].shape[0]\ndf_balanced = df[df['sha'] == 1].sample(len_4, random_state=seed) \ndf_balanced = pd.concat([df_balanced, df[df['sha'] == 4]])\ndf_balanced.sha.value_counts()","output":{"0":{"data":{"text/plain":"sha\n1    18710\n4    18710\nName: count, dtype: int64"},"exec_count":3,"output_type":"execute_result"}},"pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"0ba8c0","input":"#Get columns with all the BSD features, from which we will eventually remove one at a time\nbsd_features = ['special_value', 'torsion', 'real_period', 'regulator', 'tamagawa_product', 'sha']\n\ndf_balanced_bsd = df_balanced[bsd_features].copy()","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"50f1ac","input":"df_balanced_bsd.head(5)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>special_value</th>\n      <th>torsion</th>\n      <th>real_period</th>\n      <th>regulator</th>\n      <th>tamagawa_product</th>\n      <th>sha</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>393967</th>\n      <td>7.08730</td>\n      <td>4</td>\n      <td>0.87493</td>\n      <td>8.10043</td>\n      <td>16</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>811492</th>\n      <td>5.28675</td>\n      <td>2</td>\n      <td>0.31006</td>\n      <td>1.70505</td>\n      <td>40</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>872987</th>\n      <td>9.43579</td>\n      <td>1</td>\n      <td>1.05987</td>\n      <td>2.22569</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>761927</th>\n      <td>2.52192</td>\n      <td>2</td>\n      <td>0.54553</td>\n      <td>0.57786</td>\n      <td>32</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2647019</th>\n      <td>5.41466</td>\n      <td>1</td>\n      <td>0.31870</td>\n      <td>4.24740</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         special_value  torsion  real_period  regulator  tamagawa_product  sha\n393967         7.08730        4      0.87493    8.10043                16    1\n811492         5.28675        2      0.31006    1.70505                40    1\n872987         9.43579        1      1.05987    2.22569                 4    1\n761927         2.52192        2      0.54553    0.57786                32    1\n2647019        5.41466        1      0.31870    4.24740                 4    1"},"exec_count":5,"output_type":"execute_result"}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"3618ec","input":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import HistGradientBoostingClassifier, HistGradientBoostingRegressor","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"806563","input":"# Initialize an empty DataFrame to store the results\nresults_df_hist_grad = pd.DataFrame({\n    'Feature Deleted': pd.Series(dtype='str'),\n    'Accuracy': pd.Series(dtype='float')})\n\n\nfor i in range(len(bsd_features[:-1])):\n    print(f'Running model without {bsd_features[i]}..')\n    df_sub = df_balanced_bsd.drop(columns=[bsd_features[i]]).copy()\n    X = df_sub[[c for c in df_sub.columns if c != 'sha']]\n    y = df_sub['sha']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)\n    model = HistGradientBoostingClassifier(random_state=42)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    \n   # Append the results to the DataFrame\n    results_df_hist_grad = pd.concat([results_df_hist_grad, pd.DataFrame([{'Feature Deleted': bsd_features[i], 'Accuracy': accuracy}])], ignore_index=True)\n    \nprint(results_df_hist_grad)","output":{"0":{"name":"stdout","output_type":"stream","text":"Running model without special_value..\n"},"1":{"name":"stdout","output_type":"stream","text":"Running model without torsion..\n"},"2":{"name":"stdout","output_type":"stream","text":"Running model without real_period..\n"},"3":{"name":"stdout","output_type":"stream","text":"Running model without regulator..\n"},"4":{"name":"stdout","output_type":"stream","text":"Running model without tamagawa_product..\n"},"5":{"name":"stdout","output_type":"stream","text":"    Feature Deleted  Accuracy\n0     special_value  0.920230\n1           torsion  0.811865\n2       real_period  0.781935\n3         regulator  0.831106\n4  tamagawa_product  0.766569\n"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"4e10cf","input":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import HistGradientBoostingClassifier, HistGradientBoostingRegressor","pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"c616af","input":"# Initialize an empty DataFrame to store the results\nresults_df_hist_grad_log = pd.DataFrame({\n    'Feature Deleted': pd.Series(dtype='str'),\n    'Accuracy': pd.Series(dtype='float')})\n\n\nfor i in range(len(bsd_features[:-1])):\n    print(f'Running model without {bsd_features[i]}..')\n    df_sub_log = df_balanced_bsd.drop(columns=[bsd_features[i]]).copy()\n    print\n    X = df_sub_log[[c for c in df_sub_log.columns if c != 'sha']].apply(np.log)\n    y = df_sub_log['sha']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)\n    model = HistGradientBoostingClassifier(random_state=seed)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    \n   # Append the results to the DataFrame\n    results_df_hist_grad_log = pd.concat([results_df_hist_grad_log, pd.DataFrame([{'Feature Deleted': bsd_features[i], 'Accuracy': accuracy}])], ignore_index=True)\n    \nprint(results_df_hist_grad_log)","output":{"0":{"name":"stdout","output_type":"stream","text":"Running model without special_value..\n"},"1":{"name":"stdout","output_type":"stream","text":"Running model without torsion..\n"},"2":{"name":"stdout","output_type":"stream","text":"Running model without real_period..\n"},"3":{"name":"stdout","output_type":"stream","text":"Running model without regulator..\n"},"4":{"name":"stdout","output_type":"stream","text":"Running model without tamagawa_product..\n"},"5":{"name":"stdout","output_type":"stream","text":"    Feature Deleted  Accuracy\n0     special_value  0.920230\n1           torsion  0.811865\n2       real_period  0.781935\n3         regulator  0.831106\n4  tamagawa_product  0.766569\n"}},"pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"215a71","input":"# 1. Create balanced dataset of elliptic curves with positive rank and size of the Tate-Shafarevich group equal to 1 and 4 containing all BSD features","pos":1.5,"type":"cell"}
{"cell_type":"markdown","id":"72100d","input":"# 2. Delete one feature at a time on original data\nThe best accuracy is about 92% when removing the special value.","pos":5.5,"type":"cell"}
{"cell_type":"markdown","id":"b184c0","input":"# 3. Delete one feature at a time on log-transformed data\nAgain, note that the accuracy scores are identical to those of the original data.","pos":7.5,"type":"cell"}
{"cell_type":"markdown","id":"f703d3","input":"This notebook is for HGBM on curves with positive rank and size of Sha equal to 1 and 4 and removing one BSD feature at a time. This includes both the original and log-transformed data.","pos":0,"type":"cell"}
{"id":0,"time":1734124445960,"type":"user"}
{"last_load":1734039602107,"type":"file"}